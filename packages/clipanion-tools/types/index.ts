// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.

export type CommandSpec = { primaryPath: Array<string>, aliases: Array<Array<string>>, category: string | null, description: string | null, details: string | null, components: Array<Component>, requiredOptions: Array<number>, };

export type Component = { "type": "positional" } & PositionalSpec | { "type": "option" } & OptionSpec;

export type OptionSpec = { primaryName: string, aliases: Array<string>, description: string | null, minLen: number, extraLen: number | null, allowBinding: boolean, allowBoolean: boolean, isHidden: boolean, isRequired: boolean, };

export type PositionalSpec = { "type": "keyword", expected: string, } | { "type": "dynamic", name: string, description: string | null, min_len: number, extra_len: number | null, is_prefix: boolean, is_proxy: boolean, };

export type Token = { "type": "syntax", argIndex: number, slice: { start: number, end: number, }, } | { "type": "keyword", argIndex: number, slice: { start: number, end: number, }, } | { "type": "option", argIndex: number, slice: { start: number, end: number, }, componentId: number, } | { "type": "positional", argIndex: number, slice: { start: number, end: number, }, componentId: number, } | { "type": "assign", argIndex: number, slice: { start: number, end: number, }, componentId: number, } | { "type": "value", argIndex: number, slice: { start: number, end: number, }, componentId: number, };

export type TokenSet = { commandId: number, tokens: Array<Token>, };
